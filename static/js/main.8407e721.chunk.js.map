{"version":3,"sources":["dataTable/index.js","App.js","reportWebVitals.js","index.js"],"names":["DataTable","columns","dataField","text","sort","style","cell","price","console","log","color","useState","tableData","setTableData","useEffect","fetch","then","response","json","res","catch","err","bootstrap4","keyField","data","rowStyle","row","assetClass","backgroundColor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PAKe,SAASA,IAEpB,IAYMC,EAAU,CACZ,CAACC,UAAU,SAAUC,KAAK,SAAUC,MAAM,GAC1C,CAACF,UAAU,QAASC,KAAK,QAASC,MAAM,EACpCC,MAAQ,SAACC,GACP,OAAGA,EAAKC,MAAQ,GACVC,QAAQC,IAAI,YAAYH,EAAKC,OACtB,CAACG,MAAM,SAGP,CAACA,MAAM,SAI1B,CAACR,UAAU,aAAcC,KAAK,aAAcC,MAAM,IAGtD,EAAkCO,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAWA,OATAC,qBAAU,WACRC,MAAM,qBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAG,OAAIN,EAAaM,MACzBC,OAAM,SAASC,GACZb,QAAQC,IAAI,QAASY,QAE3B,IAGE,8BACI,cAAC,IAAD,CACIC,YAAU,EACVC,SAAS,SACTtB,QAASA,EACTuB,KAAMZ,EACNa,SA9CK,SAACC,GACd,MAAsB,aAAnBA,EAAIC,WACI,CAAEC,gBAAiB,QAEH,WAAnBF,EAAIC,WACD,CAAEC,gBAAiB,SAEH,UAAnBF,EAAIC,WACD,CAACC,gBAAiB,cADxB,OCXE,SAASC,IAEtB,OACE,8BACE,cAAC7B,EAAD,MCPN,IAYe8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8407e721.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.css';\n\nexport default function DataTable() {\n\n    const rowStyle = (row) => {\n        if(row.assetClass === \"Equities\"){\n            return { backgroundColor: \"Cyan\"}\n        }\n        else if(row.assetClass === \"Credit\"){\n            return { backgroundColor: \"Green\"}\n        }\n        else if(row.assetClass === \"Macro\"){\n            return {backgroundColor: \"White\"}\n        }\n    };\n\n    const columns = [\n        {dataField:'ticker', text:'Ticker', sort: true},\n        {dataField:'price', text:'Price', sort: true, \n            style : (cell) => \n            { if(cell.price > 0){\n                    console.log(\"priceeeee\",cell.price);\n                    return {color:\"Blue\"}\n                }\n                else{\n                    return {color:\"Red\"}\n                }\n            }\n        },\n        {dataField:'assetClass', text:'AssetClass', sort: true}\n    ]\n\n    const [tableData, setTableData] = useState([]);\n  \n    useEffect(() => {\n      fetch('./sampleData.json')\n        .then(response => response.json())\n        .then(res => setTableData(res))\n        .catch(function(err){\n            console.log(\"error\", err);\n        })\n    },[]);\n    \n    return(\n        <div>\n            <BootstrapTable \n                bootstrap4 \n                keyField=\"ticker\" \n                columns={columns} \n                data={tableData} \n                rowStyle={rowStyle}\n            />\n        </div>\n        // <table>\n        //         <tr>\n        //             <th>Ticker</th> \n        //             <th>Price</th>\n        //             <th>AssetClass</th>\n        //         </tr>\n        //         {\n        //             tableData && tableData.length > 0 ?\n        //                 tableData.map(tbldata => \n        //                     <tr>\n        //                         <td>{tbldata.ticker}</td>\n        //                         <td style={{ color: tbldata.price > 0 ? \"green\" : \"red\" }}>{tbldata.price}</td>\n        //                         <td>{tbldata.assetClass}</td>\n        //                     </tr>\n        //                 )\n        //                 : 'Data is loading'\n        //         }\n        // </table>\n    )\n\n}","import './App.css';\nimport DataTable from \"./dataTable\";\n\nexport default function App(){\n\n  return (\n    <div>\n      <DataTable /> \n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}